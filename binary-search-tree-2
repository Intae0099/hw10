/*
 * Binary Search Tree #2
 *
 * Data Structures
 *
 * Department of Computer Science
 * at Chungbuk National University
 *
 */

#include <stdio.h>
#include <stdlib.h>



typedef struct node {
	int key;
	struct node *left;
	struct node *right;
} Node;

/* for stack */
#define MAX_STACK_SIZE		20
Node* stack[MAX_STACK_SIZE];
int top = -1;

Node* pop();
void push(Node* aNode);

/* for queue */
#define MAX_QUEUE_SIZE		20
Node* queue[MAX_QUEUE_SIZE];
int front = -1;
int rear = -1;

Node* deQueue();
void enQueue(Node* aNode);


int initializeBST(Node** h);

/* functions that you have to implement */
void recursiveInorder(Node* ptr);	  /* recursive inorder traversal */
void iterativeInorder(Node* ptr);     /* iterative inorder traversal */
void levelOrder(Node* ptr);	          /* level order traversal */
int insert(Node* head, int key);      /* insert a node to the tree */
int deleteNode(Node* head, int key);  /* delete the node for the key */
int freeBST(Node* head); /* free all memories allocated to the tree */

/* you may add your own defined functions if necessary */


void printStack();



int main()
{
	char command;
	int key;
	Node* head = NULL;

	do{
		printf("\n\n");
		printf("----------------------------------------------------------------\n");
		printf("                   Binary Search Tree #2                        \n");
		printf("----------------------------------------------------------------\n");
		printf(" Initialize BST       = z                                       \n");
		printf(" Insert Node          = i      Delete Node                  = d \n");
		printf(" Recursive Inorder    = r      Iterative Inorder (Stack)    = t \n");
		printf(" Level Order (Queue)  = l      Quit                         = q \n");
		printf("----------------------------------------------------------------\n");

		printf("Command = ");
		scanf(" %c", &command);

		switch(command) {
		case 'z': case 'Z':
			initializeBST(&head);
			break;
		case 'q': case 'Q':
			freeBST(head);
			break;
		case 'i': case 'I':
			printf("Your Key = ");
			scanf("%d", &key);
			insert(head, key);
			break;
		case 'd': case 'D':
			printf("Your Key = ");
			scanf("%d", &key);
			deleteNode(head, key);
			break;

		case 'r': case 'R':
			recursiveInorder(head->left);
			break;
		case 't': case 'T':
			iterativeInorder(head->left); 
			break;

		case 'l': case 'L':
			levelOrder(head->left);
			break;

		case 'p': case 'P':
			printStack();
			break;

		default:
			printf("\n       >>>>>   Concentration!!   <<<<<     \n");
			break;
		}

	}while(command != 'q' && command != 'Q');

	return 1;
}

int initializeBST(Node** h) {

	/* if the tree is not empty, then remove all allocated nodes from the tree*/
	if(*h != NULL)
		freeBST(*h);

	/* create a head node */
	*h = (Node*)malloc(sizeof(Node));
	(*h)->left = NULL;	/* root */
	(*h)->right = *h;
	(*h)->key = -9999;

	top = -1;

	front = rear = -1;

	return 1;
}



void recursiveInorder(Node* ptr)
{
	if(ptr) {
		recursiveInorder(ptr->left);
		printf(" [%d] ", ptr->key);
		recursiveInorder(ptr->right);
	}
}

/**
 * textbook: p 224s
 */
void iterativeInorder(Node* node) 
{
	for(;;) //반복문 실행
	{
		for(; node; node = node->left) //node가 NULL일때 까지 node의 왼쪽 자식노드로 이동하며 반복문 실행
			push(node); //node를 스택에 쌓는다
		node = pop(); //맨 위에 있는 스택을 빼버린다

		if(!node) break; //node가 NULL이 아닐경우 반복문 종료

		printf("[%d] ", node->key); //node의 key값을 출력한다
		node = node->right; //노드를 오른쪽 자식 노드로 이동
	}
}

/**
 * textbook: p 225
 */
void levelOrder(Node* ptr)
{
	if(!ptr) return; //ptr이 아닐경우 리턴으로 함수 종료
	enQueue(ptr); //루트노드인 ptr를 큐에 넣는다.

	for(;;) //반복문 실행
	{
		ptr = deQueue(); //ptr을 
		if(ptr) //ptr이 NULL이 아닐 경우
		{
			printf("[%d] ", ptr->key); //ptr의 키값을 출력
			if(ptr->left) //ptr의 왼쪽 자식 노드가 NULL이 아닐경우
				enQueue(ptr->left); //ptr의 왼쪽 자식 노드를 큐에 넣는다
			if(ptr->right) //ptr의 오른쪽 자식 노드가 NULL이 아닐경우
				enQueue(ptr->right); //ptr의 오른쪽 자식 노드를 큐에 넣는다.
		}
		else break; //그렇지 않을 경우 break를 통해 반복문 종료
	}
}


int insert(Node* head, int key)
{
	Node* newNode = (Node*)malloc(sizeof(Node));
	newNode->key = key;
	newNode->left = NULL;
	newNode->right = NULL;

	if (head->left == NULL) {
		head->left = newNode;
		return 1;
	}

	/* head->left is the root */
	Node* ptr = head->left;

	Node* parentNode = NULL;
	while(ptr != NULL) {

		/* if there is a node for the key, then just return */
		if(ptr->key == key) return 1;

		/* we have to move onto children nodes,
		 * keep tracking the parent using parentNode */
		parentNode = ptr;

		/* key comparison, if current node's key is greater than input key
		 * then the new node has to be inserted into the right subtree;
		 * otherwise the left subtree.
		 */
		if(ptr->key < key)
			ptr = ptr->right;
		else
			ptr = ptr->left;
	}

	/* linking the new node to the parent */
	if(parentNode->key > key)
		parentNode->left = newNode;
	else
		parentNode->right = newNode;
	return 1;
}


int deleteNode(Node* head, int key) //노드 지우가
{
	Node* ptr = head->left; //루트노드를 ptr에 가져온다
	Node* prev = ptr; //prev를 ptr의 부모노드를 가르키게 한다
	Node* temp = NULL; //자식노드가 2개있을때 부모노드의 오른쪽 자식노드로 설정할 임시노드

	while(ptr->key != key) //ptr의 key가 key가 아닐때 반복한다
	{
		if(ptr->key < key) //만약 ptr의 key가 key보다 작을경우
		{
			prev = ptr; //부모노드를 ptr로 설정
			ptr = ptr->right; //ptr을 오른쪽 자식노드로 이동
		}
		else if (ptr->key > key) //그렇지 않고 ptr의 key가 key보다 클 경우
		{	
			prev = ptr; //부모노드를 ptr로 설정
			ptr = ptr->left; //ptr을 왼쪽 자식노드로 이동
		}
		else //그렇지 않을 경우 즉 ptr의key가 key값과 같을경우
			break; //반복문 종료로 key값이 있는 ptr노드를 가져온더
	}

	if(ptr->left ==NULL && ptr->right == NULL) //ptr의 왼쪽,오른쪽 자식노드가 NULL일 경우 즉 leaf노드일 경우
	{
		if(prev -> left == ptr) //부모노드의 왼쪽 자식노드가 ptr일 경우
			prev->left = NULL; //부모노드의 왼쪽 자식노드를 NULL로 가르킨다
		else if (prev ->right == ptr) //그렇지 않고 부모노드의 오른쪽 자식노드가 ptr일 경우
			prev->right = NULL; //부모노드의 오른쪽 자식노드를 NULL로 가르킨다
		free(ptr); //ptr노드를 동적할당 해제를 통해 삭제
		return 0; //0을 리턴함으로서 함수 종료
	}
	else if(ptr -> left != NULL && ptr ->right == NULL) //그렇지 않고 왼쪽 자식 노드가 존재하고, 오른쪽 자식 노드가 NULL일 경우
	{
		prev->left = ptr->left; //부모노드의 왼쪽 자식노드를 ptr의 왼쪽 자식노드로 가르킨다
		free(ptr); //ptr노드를 동적할당 해제를 통해삭제
		return 0; //0을 리턴함으로서 함수 종료
	}
	else if (ptr -> left == NULL && ptr -> right != NULL) //그렇지 않고 왼쪽 자식노드가 NULL이고 오른쪽 자식노드가 존재할 경우
	{
		prev->right = ptr->right; //부모노드의 오른쪽 자식노드를 ptr의 오른쪽 자식노드로 가르킨다
		free(ptr); //ptr노드를 동적할당 해제를 통해삭제
		return 0; //0을 리턴함으로서 함수 종료
	}
	else //그렇지 않을 경우 즉 자식노드가 2개일 경우
	{
		temp = ptr->right; //ptr의 오른쪽 자식노드를 temp로 설정
		while(temp) //temp가 NULL이 아닐경우 반복
		{
			if(temp->left == NULL) //temp의 왼쪽 자식노드가 NULL일 경우
			{
				prev->right = temp; //ptr의 부모노드의 오른쪽 자식노드를 temp로 가르킨다
				free(ptr); //ptr노드를 동적할당 해제를 통해삭제
				return 0; //0을 리턴함으로서 함수 종료
			}
			else //그렇지 않을 경우
			{
				temp = temp->left; //temp를 temp의 왼쪽 자식노드로 이동
			}
		}
	}
}


void freeNode(Node* ptr)
{
	if(ptr) {
		freeNode(ptr->left);
		freeNode(ptr->right);
		free(ptr);
	}
}

int freeBST(Node* head)
{

	if(head->left == head)
	{
		free(head);
		return 1;
	}

	Node* p = head->left;

	freeNode(p);

	free(head);
	return 1;
}



Node* pop() //스택의 상단 부분에 즉 배열의 맨 끝부분에 있는 스택을 빼버린다
{
	if(top == -1) //top이 -1일 경우 즉 스택이 빈 경우
		return NULL; //NULL을 리턴함으로서 함수 종료
	return stack[top--]; //스택의 맨 끝부분을 리턴하고 top--를 실행한다
}

void push(Node* aNode) //스택의 상단 부분에 aNode를 넣는다
{
	if(top >= MAX_STACK_SIZE) //top이 MAX_STACK_SIZE보다 크거나 같을 경우 즉 스택이 꽉 찬 경우
		return ; //리턴함으로서 함수 종료
	stack[++top] = aNode; //스택에 ++top 자리에 aNode를 넣는다.
}



Node* deQueue()
{
	if(front == rear) //front와 rear이 같을 경우 즉 큐가 빈경우
	{
		return NULL; //NULL을 리턴함으로서 함수 종료
	}
	return queue[++front]; //큐의 ++front순서의 큐를 리턴함으로서 함수 종료
}

void enQueue(Node* aNode)
{
	if(rear == MAX_QUEUE_SIZE - 1) //rear이 MAX_QUEUE_SIZE - 1과 같을 경우 즉 꽉찬 경우
	{
		return ; //꽉찼으므로 함수 종료
	}
	queue[++rear] = aNode; //큐의 ++rear 순서에 aNode를 넣어 큐를 쌓는다
}

void printStack() //스택의 목록을 출력한다
{
	int i; //for 반복문을 실행하기 위해 변수 i 선언
	if(top == -1) //top이 -1일때, 즉 스택안에 존재하지 않을때
	{
		printf("empty\n"); //비었음을 출력
		return ; //함수 종료
	}
	else if (top <= MAX_STACK_SIZE) //그렇지 않고 top이 MAX_STACK_SIZE인 20보다 작거나 같을때
	{
		for(i = 0; i < top; i++) //i를0부터 top보다 작을때 까지 i++을 하며 반복문 실행
		{
			printf("stack[i] = %d\n", stack[i]->key); //스택 목록 출력
		}
		return ; //함수 종료
	}
}




